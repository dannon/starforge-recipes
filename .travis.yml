sudo: required
services:
  - docker

os:
  - linux
  - osx

language: minimal

env:
  global:
    - STARFORGE="git+https://github.com/galaxyproject/starforge#egg=starforge"
    - STARFORGE_CMD="starforge --config-file=starforge.yml"
    - S3PYPI="s3pypi"
    - S3PYPI_ROOT_INDEX="git+https://github.com/natefoo/s3pypi-root-index#egg=s3pypi-root-index"
    - STARFORGE_VENV="$HOME/venv"
    - WHEEL_BUILDER_TYPE="c-extension"
    - DELOCATE="git+https://github.com/natefoo/delocate@top-level-fix-squash#egg=delocate"
    # AWS keys
    - secure: NU+OVzvkYgiO1+uBhja8ahdvXyqy/87QHRQ6rPqWs7/cMt4MMC03UrtVhtkEU6FhlI79XhtXrXmQOJRbH5h8MVUZAWZoo5nYJ46aRIaqueAN/fIYk12KnzZX8i3DlwjBTH46T++BXWOY9upsGhGMiV4qUZxGnCc7ZFIVBc9jfxO3OVS+B9LH0U5rnubXjFUFnr1f9Ukv3X3EZKAMUFpy0QdT2vMij0PSSsY17BEo2plwXoCSuRYJsQIutaAg79oOAVjUjao9vyVtgGHK1EQPCcJ0TtTFFfMgPFCHLnjuja7nack3htF8dSzer0fhLnXRdVDdxZOXWHP3JTQTObn61yCWWlR19U0cJQJZmDaZwya2+3NcdfPevUO55WBKp42hWPsym3AMTZohXNVHWByVORjRYqPLp+0ZdW/rA7nZsHiQVJTJmECsZP8KojXCaUicqJhK6whPJerX+ROeGM4RUpoDPm2n1rTWDP+aOeQ05pJP/Q8yYiLx3gOawfkujtSYAN5wnvQ24tsoDqHPP09VgCJ2+6iZbZPjPG7qE7xPOU4QbcjIFMJWFfgxEw3JfP3wuhzvMo9wOHiqPHbDBPyiu/mqlwxNTcqDJygsyrDnnHiyh3JKaAsJsPW5C2ikpn3qssZ80RIi4POSlWI2iNcy3o+7Si830LcNN8JkyInEz/Y=
    - secure: "N2C5a5rgaFR3tBylvZ8tLQ6O2D55P2cJypHkUlzZ0daP5ycyEzbhQSv6ugLxuD/qcfcHmczedYC8WFRHlF8gxXYSqgKyA3DoyEMlHZ1CRbdCyRJmkAeyWZvGYsR2xTEu6l0vARjsBQBDMIepHAwCoR6SdWlVjjnOggxxpzC3iFuXFVGIJbeN6miIh5S3TH+1+u4L5rUIxANXNveyMgY15XUmPQ2H7/wiyLi1clIJOI1VlBjdh3aTla4O65/46ygcuDKdRCS/o+buXyEeRGaZehi0wrDSS4aqDrhXjs9bEANzGKaGcVTMxeiOvmchBq2o/XjSbG7sqyPFh5or6TIIdZXPizXIriInFMNo6KIRZfJImE05P/XmVy460EFCPWxZkzfsli//65T6ap9OQQNuwgchietWrrT64CpMl4gztcKqSogu2D18vwjwo8KWoIzyhDi3HMloHD7+fJKeXrRs93MNPWXjk3QnfLkccYnOoPSN9/WiAP7cNKIm4RAG/BDjvYrTazJM2a+VFlZ53H1FpuNkVl+/qeDs6WHKN/VGhIDXv/w5DCVJt6HqRi2W5/ZsyOhLMT6FqG/t6u5Ln8s+FpMJYPuwahHnfcVDeO7SWbEOfwMNl6exBC3DHQe/C7263i814HLYN20EpDTKsG0MB21zCmvvYteUBFQ+LsQ9oVQ="
  matrix:
    - PY="3.6"
    - PY="3.7"
    - PY="3.8"
    - PY="3.9"

matrix:
  include:
    - name: "Universal Pure Python wheels"
      os: linux
      language: python
      python: "3.6"
      env:
        - WHEEL_BUILDER_TYPE="universal"
        - PY="3.6"
      install: &purepy_install
        - pip install $STARFORGE

    - name: "Pure Python 3 wheels"
      os: linux
      language: python
      python: "3.6"
      env:
        - WHEEL_BUILDER_TYPE="purepy"
        - PY="3.6"
      install: *purepy_install

before_install:
  - WHEEL_METAS=()
  - echo 'Detecting changes to wheels/...'
  - git diff --quiet "$TRAVIS_COMMIT_RANGE" --; GIT_DIFF_EXIT_CODE=$?
  - |
    if [ "$GIT_DIFF_EXIT_CODE" -gt 1 ]; then
        git remote set-branches --add origin master
        git fetch
        TRAVIS_COMMIT_RANGE=origin/master...
    fi
  - echo "\$TRAVIS_COMMIT_RANGE is $TRAVIS_COMMIT_RANGE"
  - |
    while read op path; do
        case "${path##*/}" in
            meta.yml)
                ;;
            *)
                continue
                ;;
        esac
        case "$op" in
            A|M)
                echo "$op $path"
                WHEEL_METAS+=("${path}")
                ;;
        esac
    done < <(git diff --color=never --name-status "$TRAVIS_COMMIT_RANGE" -- wheels/)
  - set | grep '^WHEEL_METAS='
  - |
    if [ ${#WHEEL_METAS[@]} -eq 0 ]; then
        echo 'No wheel changes, terminating'
        exit 0
    fi

install:
  - |
    if [ "$TRAVIS_OS_NAME" == 'osx' ]; then
        pip install virtualenv
    fi
  - virtualenv "$STARFORGE_VENV"
  - . "$STARFORGE_VENV"/bin/activate
  - pip install "$STARFORGE"

before_script:
  - BUILD_WHEEL_METAS=()
  - |
    for meta in "${WHEEL_METAS[@]}"; do
        _f=${meta#wheels/} ; wheel=${_f%%/*}
        wheel_type=$($STARFORGE_CMD wheel_type --wheels-config="$meta" "$wheel") || exit $?
        if [ "$wheel_type" == "$WHEEL_BUILDER_TYPE" ]; then
            BUILD_WHEEL_METAS+=("$meta")
        else
            echo "Builder for '$WHEEL_BUILDER_TYPE' skipping wheel '$wheel' of type '$wheel_type'"
        fi
    done
  - set | grep '^BUILD_WHEEL_METAS='
  - |
    if [ ${#BUILD_WHEEL_METAS[@]} -eq 0 ]; then
        echo "No wheel changes for builder '$WHEEL_BUILDER_TYPE', terminating"
        exit 0
    fi
  - |
    if [ "$WHEEL_BUILDER_TYPE" == 'c-extension' ]; then
        case $TRAVIS_OS_NAME in
            osx)
                STARFORGE_IMAGE_ARGS="--image=ci/osx-${PY}"
                ;;
            linux)
                STARFORGE_IMAGE_ARGS="--image=ci/linux-${PY}:x86_64 --image=ci/linux-${PY}:i686"
                ;;
        esac
        ./.ci/wheel-cext-builder-setup.sh
    else
        STARFORGE_IMAGE_ARGS="--image=ci/linux-${PY}:${WHEEL_BUILDER_TYPE}"
    fi

script:
  - |
    for meta in "${BUILD_WHEEL_METAS[@]}"; do
        _f=${meta#wheels/} ; wheel=${_f%%/*}
        echo "Building '$wheel' wheel from config: $meta"
        $STARFORGE_CMD --debug wheel --wheels-config="$meta" --wheel-dir=wheelhouse $STARFORGE_IMAGE_ARGS "$wheel"; STARFORGE_EXIT_CODE=$?
        if [ "$STARFORGE_EXIT_CODE" -eq 0 ]; then
            echo "Testing '$wheel' wheel"
            $STARFORGE_CMD --debug test_wheel --wheels-config="$meta" --wheel-dir=wheelhouse $STARFORGE_IMAGE_ARGS "$wheel" || exit $?
        elif [ "$STARFORGE_EXIT_CODE" -eq 1 ]; then
            echo "Building '$wheel' wheel failed"
            exit 1
        else
            echo "\`starforge wheel\` exited with code '$STARFORGE_EXIT_CODE', skipping wheel test"
        fi
    done

after_success:
  - |
    if ! [ "$TRAVIS_PULL_REQUEST" == "false" -a "$TRAVIS_BRANCH" == "master" -a -n "$encrypted_632cb16dd578_key" ]; then
        echo 'Nothing to deploy'
        exit 0
    fi
  - pip install "$S3PYPI" "$S3PYPI_ROOT_INDEX"
  - s3pypi --bucket galaxy-wheels --dist-path $(pwd)/wheelhouse --region us-east-2 --force
  - s3pypi-root-index --bucket galaxy-wheels --region us-east-2
